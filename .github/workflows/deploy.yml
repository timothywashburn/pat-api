name: Deploy PaT Server
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: kyrokrypt/pat-server

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          push: true
#          tags: ${{ env.DOCKER_IMAGE }}:latest

      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Setup Cloudflared Config
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_TOKEN }}" > ~/.cloudflared/cert.json
          cat > ~/.cloudflared/config.yml << EOL
          tunnel: your-tunnel-id
          credentials-file: ~/.cloudflared/cert.json
          ingress:
            - hostname: ssh.timothyrwashburn.com
              service: ssh://localhost:22
          EOL

      - name: Deploy via Cloudflared
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          ssh -T -o StrictHostKeyChecking=no -o ProxyCommand='cloudflared access ssh --hostname ssh.timothyrwashburn.com --id ${CF_ACCESS_CLIENT_ID} --secret ${CF_ACCESS_CLIENT_SECRET}' timothy@localhost << 'EOF'
            Set-Location C:\Users\timothy\Desktop\pat-server
            docker-compose pull pat-server
            docker-compose up -d --force-recreate pat-server
            docker image prune -f
          EOF